import {
  VOverlay,
  filterVOverlayProps,
  makeVOverlayProps,
  useScopeId
} from "./chunk-U43A33PL.js";
import "./chunk-DLKCK2KM.js";
import {
  forwardRefs
} from "./chunk-ABXCYA5O.js";
import {
  VDialogTransition
} from "./chunk-WPGAVKJC.js";
import "./chunk-ZXBR4TPX.js";
import {
  VDefaultsProvider
} from "./chunk-6Y5QWGXW.js";
import "./chunk-DWNLOL37.js";
import "./chunk-SPQIQUBP.js";
import "./chunk-YD3PN7UC.js";
import "./chunk-R5FTEX6L.js";
import {
  useProxiedModel
} from "./chunk-KVX4XNWL.js";
import "./chunk-JQRN3PYJ.js";
import "./chunk-WHWLEC2T.js";
import {
  IN_BROWSER,
  genericComponent,
  useRender
} from "./chunk-TN4GUMPP.js";
import "./chunk-U4IYRKUK.js";
import {
  createVNode,
  mergeProps,
  nextTick,
  ref,
  watch
} from "./chunk-2244K35H.js";
import "./chunk-J43GMYXM.js";

// node_modules/vuetify/lib/components/VDialog/VDialog.mjs
import "/Users/twalopc/Desktop/MyWorkspace/dailyexpenses/node_modules/vuetify/lib/components/VDialog/VDialog.css";
var VDialog = genericComponent()({
  name: "VDialog",
  props: {
    fullscreen: Boolean,
    retainFocus: {
      type: Boolean,
      default: true
    },
    scrollable: Boolean,
    ...makeVOverlayProps({
      origin: "center center",
      scrollStrategy: "block",
      transition: {
        component: VDialogTransition
      },
      zIndex: 2400
    })
  },
  emits: {
    "update:modelValue": (value) => true
  },
  setup(props, _ref) {
    let {
      slots
    } = _ref;
    const isActive = useProxiedModel(props, "modelValue");
    const {
      scopeId
    } = useScopeId();
    const overlay = ref();
    function onFocusin(e) {
      var _overlay$value, _overlay$value2;
      const before = e.relatedTarget;
      const after = e.target;
      if (before !== after && (_overlay$value = overlay.value) != null && _overlay$value.contentEl && (_overlay$value2 = overlay.value) != null && _overlay$value2.globalTop && ![document, overlay.value.contentEl].includes(after) && !overlay.value.contentEl.contains(after)) {
        const focusable = [...overlay.value.contentEl.querySelectorAll('button, [href], input:not([type="hidden"]), select, textarea, [tabindex]:not([tabindex="-1"])')].filter((el) => !el.hasAttribute("disabled") && !el.matches('[tabindex="-1"]'));
        if (!focusable.length)
          return;
        const firstElement = focusable[0];
        const lastElement = focusable[focusable.length - 1];
        if (before === firstElement) {
          lastElement.focus();
        } else {
          firstElement.focus();
        }
      }
    }
    if (IN_BROWSER) {
      watch(() => isActive.value && props.retainFocus, (val) => {
        val ? document.addEventListener("focusin", onFocusin) : document.removeEventListener("focusin", onFocusin);
      }, {
        immediate: true
      });
    }
    watch(isActive, async (val) => {
      await nextTick();
      if (val) {
        var _contentEl;
        (_contentEl = overlay.value.contentEl) == null ? void 0 : _contentEl.focus({
          preventScroll: true
        });
      } else {
        var _activatorEl;
        (_activatorEl = overlay.value.activatorEl) == null ? void 0 : _activatorEl.focus({
          preventScroll: true
        });
      }
    });
    useRender(() => {
      const [overlayProps] = filterVOverlayProps(props);
      return createVNode(VOverlay, mergeProps({
        "ref": overlay,
        "class": ["v-dialog", {
          "v-dialog--fullscreen": props.fullscreen,
          "v-dialog--scrollable": props.scrollable
        }]
      }, overlayProps, {
        "modelValue": isActive.value,
        "onUpdate:modelValue": ($event) => isActive.value = $event,
        "aria-role": "dialog",
        "aria-modal": "true",
        "activatorProps": mergeProps({
          "aria-haspopup": "dialog",
          "aria-expanded": String(isActive.value)
        }, props.activatorProps)
      }, scopeId), {
        activator: slots.activator,
        default: function() {
          var _slots$default;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          return createVNode(VDefaultsProvider, {
            "root": true
          }, {
            default: () => [(_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots, ...args)]
          });
        }
      });
    });
    return forwardRefs({}, overlay);
  }
});
export {
  VDialog
};
//# sourceMappingURL=vuetify_lib_components_VDialog_index__mjs.js.map
