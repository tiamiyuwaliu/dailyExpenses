{
  "version": 3,
  "sources": ["../../vuetify/src/components/VDialog/VDialog.tsx"],
  "sourcesContent": ["// Styles\nimport './VDialog.sass'\n\n// Components\nimport { VDialogTransition } from '@/components/transitions'\nimport { VDefaultsProvider } from '@/components/VDefaultsProvider'\nimport { VOverlay } from '@/components/VOverlay'\n\n// Composables\nimport { useProxiedModel } from '@/composables/proxiedModel'\nimport { useScopeId } from '@/composables/scopeId'\nimport { forwardRefs } from '@/composables/forwardRefs'\n\n// Utilities\nimport { mergeProps, nextTick, ref, watch } from 'vue'\nimport { genericComponent, IN_BROWSER, useRender } from '@/util'\nimport { filterVOverlayProps, makeVOverlayProps } from '@/components/VOverlay/VOverlay'\n\n// Types\nimport type { SlotsToProps } from '@/util'\nimport type { OverlaySlots } from '@/components/VOverlay/VOverlay'\n\nexport const VDialog = genericComponent<new () => {\n  $props: SlotsToProps<OverlaySlots>\n}>()({\n  name: 'VDialog',\n\n  props: {\n    fullscreen: Boolean,\n    retainFocus: {\n      type: Boolean,\n      default: true,\n    },\n    scrollable: Boolean,\n\n    ...makeVOverlayProps({\n      origin: 'center center' as const,\n      scrollStrategy: 'block' as const,\n      transition: { component: VDialogTransition },\n      zIndex: 2400,\n    }),\n  },\n\n  emits: {\n    'update:modelValue': (value: boolean) => true,\n  },\n\n  setup (props, { slots }) {\n    const isActive = useProxiedModel(props, 'modelValue')\n    const { scopeId } = useScopeId()\n\n    const overlay = ref<VOverlay>()\n    function onFocusin (e: FocusEvent) {\n      const before = e.relatedTarget as HTMLElement | null\n      const after = e.target as HTMLElement | null\n\n      if (\n        before !== after &&\n        overlay.value?.contentEl &&\n        // We're the topmost dialog\n        overlay.value?.globalTop &&\n        // It isn't the document or the dialog body\n        ![document, overlay.value.contentEl].includes(after!) &&\n        // It isn't inside the dialog body\n        !overlay.value.contentEl.contains(after)\n      ) {\n        const focusable = [...overlay.value.contentEl.querySelectorAll(\n          'button, [href], input:not([type=\"hidden\"]), select, textarea, [tabindex]:not([tabindex=\"-1\"])'\n        )].filter(el => !el.hasAttribute('disabled') && !el.matches('[tabindex=\"-1\"]')) as HTMLElement[]\n\n        if (!focusable.length) return\n\n        const firstElement = focusable[0]\n        const lastElement = focusable[focusable.length - 1]\n\n        if (before === firstElement) {\n          lastElement.focus()\n        } else {\n          firstElement.focus()\n        }\n      }\n    }\n\n    if (IN_BROWSER) {\n      watch(() => isActive.value && props.retainFocus, val => {\n        val\n          ? document.addEventListener('focusin', onFocusin)\n          : document.removeEventListener('focusin', onFocusin)\n      }, { immediate: true })\n    }\n\n    watch(isActive, async val => {\n      await nextTick()\n      if (val) {\n        overlay.value!.contentEl?.focus({ preventScroll: true })\n      } else {\n        overlay.value!.activatorEl?.focus({ preventScroll: true })\n      }\n    })\n\n    useRender(() => {\n      const [overlayProps] = filterVOverlayProps(props)\n\n      return (\n        <VOverlay\n          ref={ overlay }\n          class={[\n            'v-dialog',\n            {\n              'v-dialog--fullscreen': props.fullscreen,\n              'v-dialog--scrollable': props.scrollable,\n            },\n          ]}\n          { ...overlayProps }\n          v-model={ isActive.value }\n          aria-role=\"dialog\"\n          aria-modal=\"true\"\n          activatorProps={ mergeProps({\n            'aria-haspopup': 'dialog',\n            'aria-expanded': String(isActive.value),\n          }, props.activatorProps) }\n          { ...scopeId }\n        >\n          {{\n            activator: slots.activator,\n            default: (...args) => (\n              <VDefaultsProvider root>\n                { slots.default?.(...args) }\n              </VDefaultsProvider>\n            ),\n          }}\n        </VOverlay>\n      )\n    })\n\n    return forwardRefs({}, overlay)\n  },\n})\n\nexport type VDialog = InstanceType<typeof VDialog>\n"],
  "mappings": "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",
  "names": ["VDialog", "genericComponent", "name", "props", "fullscreen", "Boolean", "retainFocus", "type", "default", "scrollable", "makeVOverlayProps", "origin", "scrollStrategy", "transition", "component", "VDialogTransition", "zIndex", "emits", "value", "setup", "slots", "isActive", "useProxiedModel", "scopeId", "useScopeId", "overlay", "ref", "onFocusin", "e", "before", "relatedTarget", "after", "target", "contentEl", "globalTop", "document", "includes", "contains", "focusable", "querySelectorAll", "filter", "el", "hasAttribute", "matches", "length", "firstElement", "lastElement", "focus", "IN_BROWSER", "watch", "val", "addEventListener", "removeEventListener", "immediate", "nextTick", "preventScroll", "activatorEl", "useRender", "overlayProps", "filterVOverlayProps", "mergeProps", "String", "activatorProps", "activator", "args", "forwardRefs"]
}
