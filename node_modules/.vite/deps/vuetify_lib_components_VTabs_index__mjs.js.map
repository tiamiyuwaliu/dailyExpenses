{
  "version": 3,
  "sources": ["../../vuetify/src/components/VTabs/VTabs.tsx", "../../vuetify/src/components/VSlideGroup/VSlideGroup.tsx", "../../vuetify/src/components/VSlideGroup/helpers.ts", "../../vuetify/src/components/VSlideGroup/VSlideGroupItem.tsx", "../../vuetify/src/components/VTabs/VTab.tsx", "../../vuetify/src/components/VTabs/shared.ts"],
  "sourcesContent": ["// Styles\nimport './VTabs.sass'\n\n// Components\nimport { VSlideGroup } from '@/components/VSlideGroup'\nimport { VTab } from './VTab'\n\n// Composables\nimport { makeDensityProps, useDensity } from '@/composables/density'\nimport { makeTagProps } from '@/composables/tag'\nimport { provideDefaults } from '@/composables/defaults'\nimport { useBackgroundColor } from '@/composables/color'\nimport { useProxiedModel } from '@/composables/proxiedModel'\n\n// Utilities\nimport { computed, toRef } from 'vue'\nimport { convertToUnit, defineComponent, useRender } from '@/util'\n\n// Types\nimport { VTabsSymbol } from './shared'\nimport type { PropType } from 'vue'\n\nexport type TabItem = string | Record<string, any>\n\nfunction parseItems (items: TabItem[] | undefined) {\n  if (!items) return []\n\n  return items.map(item => {\n    if (typeof item === 'string') return { title: item, value: item }\n\n    return item\n  })\n}\n\nexport const VTabs = defineComponent({\n  name: 'VTabs',\n\n  props: {\n    alignTabs: {\n      type: String as PropType<'start' | 'title' | 'center' | 'end'>,\n      default: 'start',\n    },\n    color: String,\n    direction: {\n      type: String as PropType<'horizontal' | 'vertical'>,\n      default: 'horizontal',\n    },\n    fixedTabs: Boolean,\n    items: {\n      type: Array as PropType<TabItem[]>,\n      default: () => ([]),\n    },\n    stacked: Boolean,\n    bgColor: String,\n    grow: Boolean,\n    height: {\n      type: [Number, String],\n      default: undefined,\n    },\n    hideSlider: Boolean,\n    sliderColor: String,\n    modelValue: null,\n    mandatory: {\n      type: [Boolean, String] as PropType<boolean | 'force'>,\n      default: 'force',\n    },\n\n    ...makeDensityProps(),\n    ...makeTagProps(),\n  },\n\n  emits: {\n    'update:modelValue': (v: unknown) => true,\n  },\n\n  setup (props, { slots }) {\n    const model = useProxiedModel(props, 'modelValue')\n    const parsedItems = computed(() => parseItems(props.items))\n    const { densityClasses } = useDensity(props)\n    const { backgroundColorClasses, backgroundColorStyles } = useBackgroundColor(toRef(props, 'bgColor'))\n\n    provideDefaults({\n      VTab: {\n        color: toRef(props, 'color'),\n        direction: toRef(props, 'direction'),\n        stacked: toRef(props, 'stacked'),\n        fixed: toRef(props, 'fixedTabs'),\n        sliderColor: toRef(props, 'sliderColor'),\n        hideSlider: toRef(props, 'hideSlider'),\n      },\n    })\n\n    useRender(() => (\n      <VSlideGroup\n        v-model={ model.value }\n        class={[\n          'v-tabs',\n          `v-tabs--${props.direction}`,\n          `v-tabs--align-tabs-${props.alignTabs}`,\n          {\n            'v-tabs--fixed-tabs': props.fixedTabs,\n            'v-tabs--grow': props.grow,\n            'v-tabs--stacked': props.stacked,\n          },\n          densityClasses.value,\n          backgroundColorClasses.value,\n        ]}\n        style={[\n          { '--v-tabs-height': convertToUnit(props.height) },\n          backgroundColorStyles.value,\n        ]}\n        role=\"tablist\"\n        symbol={ VTabsSymbol }\n        mandatory={ props.mandatory }\n        direction={ props.direction }\n      >\n        { slots.default ? slots.default() : parsedItems.value.map(item => (\n          <VTab { ...item } key={ item.title } />\n        )) }\n      </VSlideGroup>\n    ))\n\n    return {}\n  },\n})\n\nexport type VTabs = InstanceType<typeof VTabs>\n", "// Styles\nimport './VSlideGroup.sass'\n\n// Components\nimport { VFadeTransition } from '@/components/transitions'\nimport { VIcon } from '@/components/VIcon'\n\n// Composables\nimport { IconValue } from '@/composables/icons'\nimport { makeGroupProps, useGroup } from '@/composables/group'\nimport { makeTagProps } from '@/composables/tag'\nimport { useDisplay } from '@/composables'\nimport { useResizeObserver } from '@/composables/resizeObserver'\nimport { useRtl } from '@/composables/locale'\n\n// Utilities\nimport { computed, ref, watch } from 'vue'\nimport { clamp, genericComponent, IN_BROWSER, useRender } from '@/util'\nimport { bias, calculateCenteredOffset, calculateUpdatedOffset } from './helpers'\n\n// Types\nimport type { InjectionKey } from 'vue'\nimport type { SlotsToProps } from '@/util'\nimport type { GroupProvide } from '@/composables/group'\n\nexport const VSlideGroupSymbol: InjectionKey<GroupProvide> = Symbol.for('vuetify:v-slide-group')\n\ninterface SlideGroupSlot {\n  next: GroupProvide['next']\n  prev: GroupProvide['prev']\n  select: GroupProvide['select']\n  isSelected: GroupProvide['isSelected']\n}\n\nexport const VSlideGroup = genericComponent<new () => {\n  $props: SlotsToProps<{\n    default: [SlideGroupSlot]\n    prev: [SlideGroupSlot]\n    next: [SlideGroupSlot]\n  }>\n}>()({\n  name: 'VSlideGroup',\n\n  props: {\n    centerActive: Boolean,\n    direction: {\n      type: String,\n      default: 'horizontal',\n    },\n    symbol: {\n      type: null,\n      default: VSlideGroupSymbol,\n    },\n    nextIcon: {\n      type: IconValue,\n      default: '$next',\n    },\n    prevIcon: {\n      type: IconValue,\n      default: '$prev',\n    },\n    showArrows: {\n      type: [Boolean, String],\n      validator: (v: any) => (\n        typeof v === 'boolean' || [\n          'always',\n          'desktop',\n          'mobile',\n        ].includes(v)\n      ),\n    },\n\n    ...makeTagProps(),\n    ...makeGroupProps({\n      selectedClass: 'v-slide-group-item--active',\n    }),\n  },\n\n  emits: {\n    'update:modelValue': (value: any) => true,\n  },\n\n  setup (props, { slots }) {\n    const { isRtl } = useRtl()\n    const { mobile } = useDisplay()\n    const group = useGroup(props, props.symbol)\n    const isOverflowing = ref(false)\n    const scrollOffset = ref(0)\n    const containerSize = ref(0)\n    const contentSize = ref(0)\n    const isHorizontal = computed(() => props.direction === 'horizontal')\n\n    const { resizeRef: containerRef, contentRect: containerRect } = useResizeObserver()\n    const { resizeRef: contentRef, contentRect } = useResizeObserver()\n\n    const firstSelectedIndex = computed(() => {\n      if (!group.selected.value.length) return -1\n\n      return group.items.value.findIndex(item => item.id === group.selected.value[0])\n    })\n\n    const lastSelectedIndex = computed(() => {\n      if (!group.selected.value.length) return -1\n\n      return group.items.value.findIndex(item => item.id === group.selected.value[group.selected.value.length - 1])\n    })\n\n    if (IN_BROWSER) {\n      let frame = -1\n      watch(() => [group.selected.value, containerRect.value, contentRect.value, isHorizontal.value], () => {\n        cancelAnimationFrame(frame)\n        frame = requestAnimationFrame(() => {\n          if (containerRect.value && contentRect.value) {\n            const sizeProperty = isHorizontal.value ? 'width' : 'height'\n\n            containerSize.value = containerRect.value[sizeProperty]\n            contentSize.value = contentRect.value[sizeProperty]\n\n            isOverflowing.value = containerSize.value + 1 < contentSize.value\n          }\n\n          if (firstSelectedIndex.value >= 0 && contentRef.value) {\n            // TODO: Is this too naive? Should we store element references in group composable?\n            const selectedElement = contentRef.value.children[lastSelectedIndex.value] as HTMLElement\n\n            if (firstSelectedIndex.value === 0 || !isOverflowing.value) {\n              scrollOffset.value = 0\n            } else if (props.centerActive) {\n              scrollOffset.value = calculateCenteredOffset({\n                selectedElement,\n                containerSize: containerSize.value,\n                contentSize: contentSize.value,\n                isRtl: isRtl.value,\n                isHorizontal: isHorizontal.value,\n              })\n            } else if (isOverflowing.value) {\n              scrollOffset.value = calculateUpdatedOffset({\n                selectedElement,\n                containerSize: containerSize.value,\n                contentSize: contentSize.value,\n                isRtl: isRtl.value,\n                currentScrollOffset: scrollOffset.value,\n                isHorizontal: isHorizontal.value,\n              })\n            }\n          }\n        })\n      })\n    }\n\n    const disableTransition = ref(false)\n\n    let startTouch = 0\n    let startOffset = 0\n\n    function onTouchstart (e: TouchEvent) {\n      const sizeProperty = isHorizontal.value ? 'clientX' : 'clientY'\n      const sign = isRtl.value && isHorizontal.value ? -1 : 1\n      startOffset = sign * scrollOffset.value\n      startTouch = e.touches[0][sizeProperty]\n      disableTransition.value = true\n    }\n\n    function onTouchmove (e: TouchEvent) {\n      if (!isOverflowing.value) return\n\n      const sizeProperty = isHorizontal.value ? 'clientX' : 'clientY'\n      const sign = isRtl.value && isHorizontal.value ? -1 : 1\n      scrollOffset.value = sign * (startOffset + startTouch - e.touches[0][sizeProperty])\n    }\n\n    function onTouchend (e: TouchEvent) {\n      const maxScrollOffset = contentSize.value - containerSize.value\n\n      if (scrollOffset.value < 0 || !isOverflowing.value) {\n        scrollOffset.value = 0\n      } else if (scrollOffset.value >= maxScrollOffset) {\n        scrollOffset.value = maxScrollOffset\n      }\n\n      disableTransition.value = false\n    }\n\n    function onScroll () {\n      if (!containerRef.value) return\n\n      containerRef.value[isHorizontal.value ? 'scrollLeft' : 'scrollTop'] = 0\n    }\n\n    const isFocused = ref(false)\n    function onFocusin (e: FocusEvent) {\n      isFocused.value = true\n\n      if (!isOverflowing.value || !contentRef.value) return\n\n      // Focused element is likely to be the root of an item, so a\n      // breadth-first search will probably find it in the first iteration\n      for (const el of e.composedPath()) {\n        for (const item of contentRef.value.children) {\n          if (item === el) {\n            scrollOffset.value = calculateUpdatedOffset({\n              selectedElement: item as HTMLElement,\n              containerSize: containerSize.value,\n              contentSize: contentSize.value,\n              isRtl: isRtl.value,\n              currentScrollOffset: scrollOffset.value,\n              isHorizontal: isHorizontal.value,\n            })\n            return\n          }\n        }\n      }\n    }\n\n    function onFocusout (e: FocusEvent) {\n      isFocused.value = false\n    }\n\n    function onFocus (e: FocusEvent) {\n      if (\n        !isFocused.value &&\n        !(e.relatedTarget && contentRef.value?.contains(e.relatedTarget as Node))\n      ) focus()\n    }\n\n    function onKeydown (e: KeyboardEvent) {\n      if (!contentRef.value) return\n\n      if (isHorizontal.value) {\n        if (e.key === 'ArrowRight') {\n          focus(isRtl.value ? 'prev' : 'next')\n        } else if (e.key === 'ArrowLeft') {\n          focus(isRtl.value ? 'next' : 'prev')\n        }\n      } else {\n        if (e.key === 'ArrowDown') {\n          focus('next')\n        } else if (e.key === 'ArrowUp') {\n          focus('prev')\n        }\n      }\n\n      if (e.key === 'Home') {\n        focus('first')\n      } else if (e.key === 'End') {\n        focus('last')\n      }\n    }\n\n    function focus (location?: 'next' | 'prev' | 'first' | 'last') {\n      if (!contentRef.value) return\n\n      if (!location) {\n        const focusable = [...contentRef.value.querySelectorAll(\n          'button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])'\n        )].filter(el => !el.hasAttribute('disabled')) as HTMLElement[]\n        focusable[0]?.focus()\n      } else if (location === 'next') {\n        const el = contentRef.value.querySelector(':focus')?.nextElementSibling as HTMLElement | undefined\n        if (el) el.focus()\n        else focus('first')\n      } else if (location === 'prev') {\n        const el = contentRef.value.querySelector(':focus')?.previousElementSibling as HTMLElement | undefined\n        if (el) el.focus()\n        else focus('last')\n      } else if (location === 'first') {\n        (contentRef.value.firstElementChild as HTMLElement)?.focus()\n      } else if (location === 'last') {\n        (contentRef.value.lastElementChild as HTMLElement)?.focus()\n      }\n    }\n\n    function scrollTo (location: 'prev' | 'next') {\n      const newAbsoluteOffset = scrollOffset.value + (location === 'prev' ? -1 : 1) * containerSize.value\n\n      scrollOffset.value = clamp(newAbsoluteOffset, 0, contentSize.value - containerSize.value)\n    }\n\n    const contentStyles = computed(() => {\n      // This adds friction when scrolling the 'wrong' way when at max offset\n      let scrollAmount = scrollOffset.value > contentSize.value - containerSize.value\n        ? -(contentSize.value - containerSize.value) + bias(contentSize.value - containerSize.value - scrollOffset.value)\n        : -scrollOffset.value\n\n      // This adds friction when scrolling the 'wrong' way when at min offset\n      if (scrollOffset.value <= 0) {\n        scrollAmount = bias(-scrollOffset.value)\n      }\n\n      const sign = isRtl.value && isHorizontal.value ? -1 : 1\n      return {\n        transform: `translate${isHorizontal.value ? 'X' : 'Y'}(${sign * scrollAmount}px)`,\n        transition: disableTransition.value ? 'none' : '',\n        willChange: disableTransition.value ? 'transform' : '',\n      }\n    })\n\n    const slotProps = computed(() => ({\n      next: group.next,\n      prev: group.prev,\n      select: group.select,\n      isSelected: group.isSelected,\n    }))\n\n    const hasAffixes = computed(() => {\n      switch (props.showArrows) {\n        // Always show arrows on desktop & mobile\n        case 'always': return true\n\n        // Always show arrows on desktop\n        case 'desktop': return !mobile.value\n\n        // Show arrows on mobile when overflowing.\n        // This matches the default 2.2 behavior\n        case true: return isOverflowing.value || Math.abs(scrollOffset.value) > 0\n\n        // Always show on mobile\n        case 'mobile': return (\n          mobile.value ||\n          (isOverflowing.value || Math.abs(scrollOffset.value) > 0)\n        )\n\n        // https://material.io/components/tabs#scrollable-tabs\n        // Always show arrows when\n        // overflowed on desktop\n        default: return (\n          !mobile.value &&\n          (isOverflowing.value || Math.abs(scrollOffset.value) > 0)\n        )\n      }\n    })\n\n    const hasPrev = computed(() => {\n      return Math.abs(scrollOffset.value) > 0\n    })\n\n    const hasNext = computed(() => {\n      // Check one scroll ahead to know the width of right-most item\n      return contentSize.value > Math.abs(scrollOffset.value) + containerSize.value\n    })\n\n    useRender(() => (\n      <props.tag\n        class={[\n          'v-slide-group',\n          {\n            'v-slide-group--vertical': !isHorizontal.value,\n            'v-slide-group--has-affixes': hasAffixes.value,\n            'v-slide-group--is-overflowing': isOverflowing.value,\n          },\n        ]}\n        tabindex={ (isFocused.value || group.selected.value.length) ? -1 : 0 }\n        onFocus={ onFocus }\n      >\n        { hasAffixes.value && (\n          <div\n            key=\"prev\"\n            class={[\n              'v-slide-group__prev',\n              { 'v-slide-group__prev--disabled': !hasPrev.value },\n            ]}\n            onClick={ () => scrollTo('prev') }\n          >\n            { slots.prev?.(slotProps.value) ?? (\n              <VFadeTransition>\n                <VIcon icon={ isRtl.value ? props.nextIcon : props.prevIcon }></VIcon>\n              </VFadeTransition>\n            ) }\n          </div>\n        ) }\n\n        <div\n          key=\"container\"\n          ref={ containerRef }\n          class=\"v-slide-group__container\"\n          onScroll={ onScroll }\n        >\n          <div\n            ref={ contentRef }\n            class=\"v-slide-group__content\"\n            style={ contentStyles.value }\n            onTouchstartPassive={ onTouchstart }\n            onTouchmovePassive={ onTouchmove }\n            onTouchendPassive={ onTouchend }\n            onFocusin={ onFocusin }\n            onFocusout={ onFocusout }\n            onKeydown={ onKeydown }\n          >\n            { slots.default?.(slotProps.value) }\n          </div>\n        </div>\n\n        { hasAffixes.value && (\n          <div\n            key=\"next\"\n            class={[\n              'v-slide-group__next',\n              { 'v-slide-group__next--disabled': !hasNext.value },\n            ]}\n            onClick={ () => scrollTo('next') }\n          >\n            { slots.next?.(slotProps.value) ?? (\n              <VFadeTransition>\n                <VIcon icon={ isRtl.value ? props.prevIcon : props.nextIcon }></VIcon>\n              </VFadeTransition>\n            ) }\n          </div>\n        ) }\n      </props.tag>\n    ))\n\n    return {\n      selected: group.selected,\n      scrollTo,\n      scrollOffset,\n      focus,\n    }\n  },\n})\n\nexport type VSlideGroup = InstanceType<typeof VSlideGroup>\n", "export function bias (val: number) {\n  const c = 0.501\n  const x = Math.abs(val)\n  return Math.sign(val) * (x / ((1 / c - 2) * (1 - x) + 1))\n}\n\nexport function calculateUpdatedOffset ({\n  selectedElement,\n  containerSize,\n  contentSize,\n  isRtl,\n  currentScrollOffset,\n  isHorizontal,\n}: {\n  selectedElement: HTMLElement\n  containerSize: number\n  contentSize: number\n  isRtl: boolean\n  currentScrollOffset: number\n  isHorizontal: boolean\n}): number {\n  const clientSize = isHorizontal ? selectedElement.clientWidth : selectedElement.clientHeight\n  const offsetStart = isHorizontal ? selectedElement.offsetLeft : selectedElement.offsetTop\n  const adjustedOffsetStart = isRtl && isHorizontal ? (contentSize - offsetStart - clientSize) : offsetStart\n\n  const totalSize = containerSize + currentScrollOffset\n  const itemOffset = clientSize + adjustedOffsetStart\n  const additionalOffset = clientSize * 0.4\n\n  if (adjustedOffsetStart <= currentScrollOffset) {\n    currentScrollOffset = Math.max(adjustedOffsetStart - additionalOffset, 0)\n  } else if (totalSize <= itemOffset) {\n    currentScrollOffset = Math.min(currentScrollOffset - (totalSize - itemOffset - additionalOffset), contentSize - containerSize)\n  }\n\n  return currentScrollOffset\n}\n\nexport function calculateCenteredOffset ({\n  selectedElement,\n  containerSize,\n  contentSize,\n  isRtl,\n  isHorizontal,\n}: {\n  selectedElement: HTMLElement\n  containerSize: number\n  contentSize: number\n  isRtl: boolean\n  isHorizontal: boolean\n}): number {\n  const clientSize = isHorizontal ? selectedElement.clientWidth : selectedElement.clientHeight\n  const offsetStart = isHorizontal ? selectedElement.offsetLeft : selectedElement.offsetTop\n\n  const offsetCentered = isRtl && isHorizontal\n    ? contentSize - offsetStart - clientSize / 2 - containerSize / 2\n    : offsetStart + clientSize / 2 - containerSize / 2\n\n  return Math.min(contentSize - containerSize, Math.max(0, offsetCentered))\n}\n", "// Composables\nimport { makeGroupItemProps, useGroupItem } from '@/composables/group'\n\n// Utilities\nimport { genericComponent } from '@/util'\nimport { VSlideGroupSymbol } from './VSlideGroup'\n\n// Types\nimport type { UnwrapRef } from 'vue'\nimport type { SlotsToProps } from '@/util'\nimport type { GroupItemProvide } from '@/composables/group'\n\nexport const VSlideGroupItem = genericComponent<new () => {\n  $props: SlotsToProps<{\n    default: [{\n      isSelected: UnwrapRef<GroupItemProvide['isSelected']>\n      select: GroupItemProvide['select']\n      toggle: GroupItemProvide['toggle']\n      selectedClass: UnwrapRef<GroupItemProvide['selectedClass']>\n    }]\n  }>\n}>()({\n  name: 'VSlideGroupItem',\n\n  props: {\n    ...makeGroupItemProps(),\n  },\n\n  emits: {\n    'group:selected': (val: { value: boolean }) => true,\n  },\n\n  setup (props, { slots }) {\n    const slideGroupItem = useGroupItem(props, VSlideGroupSymbol)\n\n    return () => slots.default?.({\n      isSelected: slideGroupItem.isSelected.value,\n      select: slideGroupItem.select,\n      toggle: slideGroupItem.toggle,\n      selectedClass: slideGroupItem.selectedClass.value,\n    })\n  },\n})\n\nexport type VSlideGroupItem = InstanceType<typeof VSlideGroupItem>\n", "// Styles\nimport './VTab.sass'\n\n// Components\nimport { VBtn } from '@/components/VBtn'\n\n// Composables\nimport { IconValue } from '@/composables/icons'\nimport { makeGroupItemProps } from '@/composables/group'\nimport { makeRouterProps } from '@/composables/router'\nimport { makeTagProps } from '@/composables/tag'\nimport { makeThemeProps } from '@/composables/theme'\nimport { useTextColor } from '@/composables/color'\n\n// Utilities\nimport { computed, ref } from 'vue'\nimport { animate, defineComponent, pick, standardEasing, useRender } from '@/util'\n\n// Types\nimport { VTabsSymbol } from './shared'\nimport type { PropType } from 'vue'\n\nexport const VTab = defineComponent({\n  name: 'VTab',\n\n  props: {\n    fixed: Boolean,\n    icon: [Boolean, String, Function, Object] as PropType<boolean | IconValue>,\n    prependIcon: IconValue,\n    appendIcon: IconValue,\n\n    stacked: Boolean,\n    title: String,\n\n    ripple: {\n      type: Boolean,\n      default: true,\n    },\n    color: String,\n    sliderColor: String,\n    hideSlider: Boolean,\n\n    direction: {\n      type: String as PropType<'horizontal' | 'vertical'>,\n      default: 'horizontal',\n    },\n\n    ...makeTagProps(),\n    ...makeRouterProps(),\n    ...makeGroupItemProps({\n      selectedClass: 'v-tab--selected',\n    }),\n    ...makeThemeProps(),\n  },\n\n  setup (props, { slots, attrs }) {\n    const { textColorClasses: sliderColorClasses, textColorStyles: sliderColorStyles } = useTextColor(props, 'sliderColor')\n    const isHorizontal = computed(() => props.direction === 'horizontal')\n    const isSelected = ref(false)\n\n    const rootEl = ref<VBtn>()\n    const sliderEl = ref<HTMLElement>()\n\n    function updateSlider ({ value }: { value: boolean }) {\n      isSelected.value = value\n\n      if (value) {\n        const prevEl: HTMLElement | undefined = rootEl.value?.$el.parentElement?.querySelector('.v-tab--selected .v-tab__slider')\n        const nextEl = sliderEl.value\n\n        if (!prevEl || !nextEl) return\n\n        const color = getComputedStyle(prevEl).color\n\n        const prevBox = prevEl.getBoundingClientRect()\n        const nextBox = nextEl.getBoundingClientRect()\n\n        const xy = isHorizontal.value ? 'x' : 'y'\n        const XY = isHorizontal.value ? 'X' : 'Y'\n        const rightBottom = isHorizontal.value ? 'right' : 'bottom'\n        const widthHeight = isHorizontal.value ? 'width' : 'height'\n\n        const prevPos = prevBox[xy]\n        const nextPos = nextBox[xy]\n        const delta = prevPos > nextPos\n          ? prevBox[rightBottom] - nextBox[rightBottom]\n          : prevBox[xy] - nextBox[xy]\n        const origin =\n          Math.sign(delta) > 0 ? (isHorizontal.value ? 'right' : 'bottom')\n          : Math.sign(delta) < 0 ? (isHorizontal.value ? 'left' : 'top')\n          : 'center'\n        const size = Math.abs(delta) + (Math.sign(delta) < 0 ? prevBox[widthHeight] : nextBox[widthHeight])\n        const scale = size / Math.max(prevBox[widthHeight], nextBox[widthHeight])\n        const initialScale = prevBox[widthHeight] / nextBox[widthHeight]\n\n        const sigma = 1.5\n        animate(nextEl, {\n          backgroundColor: [color, ''],\n          transform: [\n            `translate${XY}(${delta}px) scale${XY}(${initialScale})`,\n            `translate${XY}(${delta / sigma}px) scale${XY}(${(scale - 1) / sigma + 1})`,\n            '',\n          ],\n          transformOrigin: Array(3).fill(origin),\n        }, {\n          duration: 225,\n          easing: standardEasing,\n        })\n      }\n    }\n\n    useRender(() => {\n      const [btnProps] = pick(props, [\n        'href',\n        'to',\n        'replace',\n        'icon',\n        'stacked',\n        'prependIcon',\n        'appendIcon',\n        'ripple',\n        'theme',\n        'disabled',\n        'selectedClass',\n        'value',\n        'color',\n      ])\n\n      return (\n        <VBtn\n          _as=\"VTab\"\n          symbol={ VTabsSymbol }\n          ref={ rootEl }\n          class={[\n            'v-tab',\n          ]}\n          tabindex={ isSelected.value ? 0 : -1 }\n          role=\"tab\"\n          aria-selected={ String(isSelected.value) }\n          active={ false }\n          block={ props.fixed }\n          maxWidth={ props.fixed ? 300 : undefined }\n          variant=\"text\"\n          rounded={ 0 }\n          { ...btnProps }\n          { ...attrs }\n          onGroup:selected={ updateSlider }\n        >\n          { slots.default ? slots.default() : props.title }\n          { !props.hideSlider && (\n            <div\n              ref={ sliderEl }\n              class={[\n                'v-tab__slider',\n                sliderColorClasses.value,\n              ]}\n              style={ sliderColorStyles.value }\n            />\n          ) }\n        </VBtn>\n      )\n    })\n\n    return {}\n  },\n})\n\nexport type VTab = InstanceType<typeof VTab>\n", "import type { InjectionKey } from 'vue'\nimport type { GroupProvide } from '@/composables/group'\n\nexport const VTabsSymbol: InjectionKey<GroupProvide> = Symbol.for('vuetify:v-tabs')\n"],
  "mappings": "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",
  "names": ["bias", "val", "c", "x", "Math", "abs", "sign", "calculateUpdatedOffset", "selectedElement", "containerSize", "contentSize", "isRtl", "currentScrollOffset", "isHorizontal", "clientSize", "clientWidth", "clientHeight", "offsetStart", "offsetLeft", "offsetTop", "adjustedOffsetStart", "totalSize", "itemOffset", "additionalOffset", "max", "min", "calculateCenteredOffset", "offsetCentered", "VSlideGroupSymbol", "Symbol", "for", "VSlideGroup", "genericComponent", "name", "props", "centerActive", "Boolean", "direction", "type", "String", "default", "symbol", "nextIcon", "IconValue", "prevIcon", "showArrows", "validator", "v", "includes", "makeTagProps", "makeGroupProps", "selectedClass", "emits", "value", "setup", "slots", "isRtl", "useRtl", "mobile", "useDisplay", "group", "useGroup", "isOverflowing", "ref", "scrollOffset", "containerSize", "contentSize", "isHorizontal", "computed", "resizeRef", "containerRef", "contentRect", "containerRect", "useResizeObserver", "contentRef", "firstSelectedIndex", "selected", "length", "items", "findIndex", "item", "id", "lastSelectedIndex", "IN_BROWSER", "frame", "watch", "cancelAnimationFrame", "requestAnimationFrame", "sizeProperty", "selectedElement", "children", "calculateCenteredOffset", "calculateUpdatedOffset", "currentScrollOffset", "disableTransition", "startTouch", "startOffset", "onTouchstart", "e", "sign", "touches", "onTouchmove", "onTouchend", "maxScrollOffset", "onScroll", "isFocused", "onFocusin", "el", "composedPath", "onFocusout", "onFocus", "relatedTarget", "contains", "focus", "onKeydown", "key", "location", "focusable", "querySelectorAll", "filter", "hasAttribute", "querySelector", "nextElementSibling", "previousElementSibling", "firstElementChild", "lastElementChild", "scrollTo", "newAbsoluteOffset", "clamp", "contentStyles", "scrollAmount", "bias", "transform", "transition", "willChange", "slotProps", "next", "prev", "select", "isSelected", "hasAffixes", "Math", "abs", "hasPrev", "hasNext", "useRender", "VSlideGroupItem", "genericComponent", "name", "props", "makeGroupItemProps", "emits", "val", "setup", "slots", "slideGroupItem", "useGroupItem", "VSlideGroupSymbol", "default", "isSelected", "value", "select", "toggle", "selectedClass", "VTabsSymbol", "Symbol", "for", "VTab", "defineComponent", "name", "props", "fixed", "Boolean", "icon", "String", "Function", "Object", "prependIcon", "IconValue", "appendIcon", "stacked", "title", "ripple", "type", "default", "color", "sliderColor", "hideSlider", "direction", "makeTagProps", "makeRouterProps", "makeGroupItemProps", "selectedClass", "makeThemeProps", "setup", "slots", "attrs", "textColorClasses", "sliderColorClasses", "textColorStyles", "sliderColorStyles", "useTextColor", "isHorizontal", "computed", "isSelected", "ref", "rootEl", "sliderEl", "updateSlider", "value", "prevEl", "$el", "parentElement", "querySelector", "nextEl", "getComputedStyle", "prevBox", "getBoundingClientRect", "nextBox", "xy", "XY", "rightBottom", "widthHeight", "prevPos", "nextPos", "delta", "origin", "Math", "sign", "size", "abs", "scale", "max", "initialScale", "sigma", "animate", "backgroundColor", "transform", "transformOrigin", "Array", "fill", "duration", "easing", "standardEasing", "useRender", "btnProps", "pick", "VTabsSymbol", "undefined", "parseItems", "items", "map", "item", "title", "value", "VTabs", "defineComponent", "name", "props", "alignTabs", "type", "String", "default", "color", "direction", "fixedTabs", "Boolean", "Array", "stacked", "bgColor", "grow", "height", "Number", "undefined", "hideSlider", "sliderColor", "modelValue", "mandatory", "makeDensityProps", "makeTagProps", "emits", "v", "setup", "slots", "model", "useProxiedModel", "parsedItems", "computed", "densityClasses", "useDensity", "backgroundColorClasses", "backgroundColorStyles", "useBackgroundColor", "toRef", "provideDefaults", "VTab", "fixed", "useRender", "convertToUnit", "VTabsSymbol"]
}
