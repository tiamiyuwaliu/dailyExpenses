{
  "version": 3,
  "sources": ["../../vuetify/src/components/VTextarea/VTextarea.tsx"],
  "sourcesContent": ["// Styles\nimport './VTextarea.sass'\nimport '../VTextField/VTextField.sass'\n\n// Components\nimport { filterFieldProps, makeVFieldProps } from '@/components/VField/VField'\nimport { filterInputProps, makeVInputProps, VInput } from '@/components/VInput/VInput'\nimport { VCounter } from '@/components/VCounter'\nimport { VField } from '@/components/VField'\n\n// Directives\nimport Intersect from '@/directives/intersect'\n\n// Composables\nimport { forwardRefs } from '@/composables/forwardRefs'\nimport { useFocus } from '@/composables/focus'\nimport { useProxiedModel } from '@/composables/proxiedModel'\n\n// Utilities\nimport { computed, nextTick, onBeforeUnmount, onMounted, ref, watch } from 'vue'\nimport { callEvent, clamp, convertToUnit, defineComponent, filterInputAttrs, useRender } from '@/util'\n\n// Types\nimport type { PropType } from 'vue'\n\nexport const VTextarea = defineComponent({\n  name: 'VTextarea',\n\n  directives: { Intersect },\n\n  inheritAttrs: false,\n\n  props: {\n    autoGrow: Boolean,\n    autofocus: Boolean,\n    counter: [Boolean, Number, String] as PropType<true | number | string>,\n    counterValue: Function as PropType<(value: any) => number>,\n    hint: String,\n    persistentHint: Boolean,\n    prefix: String,\n    placeholder: String,\n    persistentPlaceholder: Boolean,\n    persistentCounter: Boolean,\n    noResize: Boolean,\n    rows: {\n      type: [Number, String],\n      default: 5,\n      validator: (v: any) => !isNaN(parseFloat(v)),\n    },\n    maxRows: {\n      type: [Number, String],\n      validator: (v: any) => !isNaN(parseFloat(v)),\n    },\n    suffix: String,\n\n    ...makeVInputProps(),\n    ...makeVFieldProps(),\n  },\n\n  emits: {\n    'click:control': (e: MouseEvent) => true,\n    'update:focused': (focused: boolean) => true,\n    'update:modelValue': (val: string) => true,\n  },\n\n  setup (props, { attrs, emit, slots }) {\n    const model = useProxiedModel(props, 'modelValue')\n    const { isFocused, focus, blur } = useFocus(props)\n    const counterValue = computed(() => {\n      return typeof props.counterValue === 'function'\n        ? props.counterValue(model.value)\n        : (model.value || '').toString().length\n    })\n    const max = computed(() => {\n      if (attrs.maxlength) return attrs.maxlength as undefined\n\n      if (\n        !props.counter ||\n        (typeof props.counter !== 'number' &&\n        typeof props.counter !== 'string')\n      ) return undefined\n\n      return props.counter\n    })\n\n    function onIntersect (\n      isIntersecting: boolean,\n      entries: IntersectionObserverEntry[]\n    ) {\n      if (!props.autofocus || !isIntersecting) return\n\n      (entries[0].target as HTMLInputElement)?.focus?.()\n    }\n\n    const vInputRef = ref<VInput>()\n    const vFieldRef = ref<VInput>()\n    const controlHeight = ref('')\n    const textareaRef = ref<HTMLInputElement>()\n    const isActive = computed(() => (\n      isFocused.value ||\n      props.persistentPlaceholder\n    ))\n\n    const messages = computed(() => {\n      return props.messages.length\n        ? props.messages\n        : (isActive.value || props.persistentHint) ? props.hint : ''\n    })\n\n    function onFocus () {\n      if (textareaRef.value !== document.activeElement) {\n        textareaRef.value?.focus()\n      }\n\n      if (!isFocused.value) focus()\n    }\n    function onControlClick (e: MouseEvent) {\n      onFocus()\n\n      emit('click:control', e)\n    }\n    function onClear (e: MouseEvent) {\n      e.stopPropagation()\n\n      onFocus()\n\n      nextTick(() => {\n        model.value = ''\n\n        callEvent(props['onClick:clear'], e)\n      })\n    }\n    function onInput (e: Event) {\n      model.value = (e.target as HTMLTextAreaElement).value\n    }\n\n    const sizerRef = ref<HTMLTextAreaElement>()\n    function calculateInputHeight () {\n      if (!props.autoGrow) return\n\n      nextTick(() => {\n        if (!sizerRef.value || !vFieldRef.value) return\n\n        const style = getComputedStyle(sizerRef.value)\n        const fieldStyle = getComputedStyle(vFieldRef.value.$el)\n\n        const padding = parseFloat(style.getPropertyValue('--v-field-padding-top')) +\n          parseFloat(style.getPropertyValue('--v-input-padding-top')) +\n          parseFloat(style.getPropertyValue('--v-field-padding-bottom'))\n\n        const height = sizerRef.value.scrollHeight\n        const lineHeight = parseFloat(style.lineHeight)\n        const minHeight = Math.max(\n          parseFloat(props.rows) * lineHeight + padding,\n          parseFloat(fieldStyle.getPropertyValue('--v-input-control-height'))\n        )\n        const maxHeight = parseFloat(props.maxRows!) * lineHeight + padding || Infinity\n\n        controlHeight.value = convertToUnit(clamp(height ?? 0, minHeight, maxHeight))\n      })\n    }\n\n    onMounted(calculateInputHeight)\n    watch(model, calculateInputHeight)\n    watch(() => props.rows, calculateInputHeight)\n    watch(() => props.maxRows, calculateInputHeight)\n    watch(() => props.density, calculateInputHeight)\n\n    let observer: ResizeObserver | undefined\n    watch(sizerRef, val => {\n      if (val) {\n        observer = new ResizeObserver(calculateInputHeight)\n        observer.observe(sizerRef.value!)\n      } else {\n        observer?.disconnect()\n      }\n    })\n    onBeforeUnmount(() => {\n      observer?.disconnect()\n    })\n\n    useRender(() => {\n      const hasCounter = !!(slots.counter || props.counter || props.counterValue)\n      const hasDetails = !!(hasCounter || slots.details)\n      const [rootAttrs, inputAttrs] = filterInputAttrs(attrs)\n      const [{ modelValue: _, ...inputProps }] = filterInputProps(props)\n      const [fieldProps] = filterFieldProps(props)\n\n      return (\n        <VInput\n          ref={ vInputRef }\n          v-model={ model.value }\n          class={[\n            'v-textarea v-text-field',\n            {\n              'v-textarea--prefixed': props.prefix,\n              'v-textarea--suffixed': props.suffix,\n              'v-text-field--prefixed': props.prefix,\n              'v-text-field--suffixed': props.suffix,\n              'v-textarea--auto-grow': props.autoGrow,\n              'v-textarea--no-resize': props.noResize || props.autoGrow,\n              'v-text-field--flush-details': ['plain', 'underlined'].includes(props.variant),\n            },\n          ]}\n          onClick:prepend={ props['onClick:prepend'] }\n          onClick:append={ props['onClick:append'] }\n          { ...rootAttrs }\n          { ...inputProps }\n          focused={ isFocused.value }\n          messages={ messages.value }\n        >\n          {{\n            ...slots,\n            default: ({\n              isDisabled,\n              isDirty,\n              isReadonly,\n              isValid,\n            }) => (\n              <VField\n                ref={ vFieldRef }\n                style={{\n                  '--v-textarea-control-height': controlHeight.value,\n                }}\n                onClick:control={ onControlClick }\n                onClick:clear={ onClear }\n                onClick:prependInner={ props['onClick:prependInner'] }\n                onClick:appendInner={ props['onClick:appendInner'] }\n                role=\"textbox\"\n                { ...fieldProps }\n                active={ isActive.value || isDirty.value }\n                dirty={ isDirty.value || props.dirty }\n                focused={ isFocused.value }\n                error={ isValid.value === false }\n              >\n                {{\n                  ...slots,\n                  default: ({\n                    props: { class: fieldClass, ...slotProps },\n                  }) => (\n                    <>\n                      { props.prefix && (\n                        <span class=\"v-text-field__prefix\">\n                          { props.prefix }\n                        </span>\n                      ) }\n\n                      <textarea\n                        ref={ textareaRef }\n                        class={ fieldClass }\n                        value={ model.value }\n                        onInput={ onInput }\n                        v-intersect={[{\n                          handler: onIntersect,\n                        }, null, ['once']]}\n                        autofocus={ props.autofocus }\n                        readonly={ isReadonly.value }\n                        disabled={ isDisabled.value }\n                        placeholder={ props.placeholder }\n                        rows={ props.rows }\n                        name={ props.name }\n                        onFocus={ onFocus }\n                        onBlur={ blur }\n                        { ...slotProps }\n                        { ...inputAttrs }\n                      />\n\n                      { props.autoGrow && (\n                        <textarea\n                          class={[\n                            fieldClass,\n                            'v-textarea__sizer',\n                          ]}\n                          v-model={ model.value }\n                          ref={ sizerRef }\n                          readonly\n                          aria-hidden=\"true\"\n                        />\n                      )}\n\n                      { props.suffix && (\n                        <span class=\"v-text-field__suffix\">\n                          { props.suffix }\n                        </span>\n                      ) }\n                    </>\n                  ),\n                }}\n              </VField>\n            ),\n            details: hasDetails ? slotProps => (\n              <>\n                { slots.details?.(slotProps) }\n\n                { hasCounter && (\n                  <>\n                    <span />\n\n                    <VCounter\n                      active={ props.persistentCounter || isFocused.value }\n                      value={ counterValue.value }\n                      max={ max.value }\n                      v-slots={ slots.counter }\n                    />\n                  </>\n                ) }\n              </>\n            ) : undefined,\n          }}\n        </VInput>\n      )\n    })\n\n    return forwardRefs({}, vInputRef, vFieldRef, textareaRef)\n  },\n})\n\nexport type VTextarea = InstanceType<typeof VTextarea>\n"],
  "mappings": "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",
  "names": ["VTextarea", "defineComponent", "name", "directives", "Intersect", "inheritAttrs", "props", "autoGrow", "Boolean", "autofocus", "counter", "Number", "String", "counterValue", "Function", "hint", "persistentHint", "prefix", "placeholder", "persistentPlaceholder", "persistentCounter", "noResize", "rows", "type", "default", "validator", "v", "isNaN", "parseFloat", "maxRows", "suffix", "makeVInputProps", "makeVFieldProps", "emits", "e", "focused", "val", "setup", "attrs", "emit", "slots", "model", "useProxiedModel", "isFocused", "focus", "blur", "useFocus", "computed", "value", "toString", "length", "max", "maxlength", "undefined", "onIntersect", "isIntersecting", "entries", "target", "vInputRef", "ref", "vFieldRef", "controlHeight", "textareaRef", "isActive", "messages", "onFocus", "document", "activeElement", "onControlClick", "onClear", "stopPropagation", "nextTick", "callEvent", "onInput", "sizerRef", "calculateInputHeight", "style", "getComputedStyle", "fieldStyle", "$el", "padding", "getPropertyValue", "height", "scrollHeight", "lineHeight", "minHeight", "Math", "maxHeight", "Infinity", "convertToUnit", "clamp", "onMounted", "watch", "density", "observer", "ResizeObserver", "observe", "disconnect", "onBeforeUnmount", "useRender", "hasCounter", "hasDetails", "details", "rootAttrs", "inputAttrs", "filterInputAttrs", "modelValue", "_", "inputProps", "filterInputProps", "fieldProps", "filterFieldProps", "includes", "variant", "isDisabled", "isDirty", "isReadonly", "isValid", "dirty", "class", "fieldClass", "slotProps", "handler", "forwardRefs"]
}
